const mysql = require('mysql2/promise')

// Configura√ß√£o base para pools
const poolConfig = {
  waitForConnections: true,
  connectionLimit: 5,
  maxIdle: 5,
  idleTimeout: 60000,
  queueLimit: 0,
  acquireTimeout: 60000,
  timeout: 60000,
  reconnect: true,
  ssl: {
    rejectUnauthorized: false
  }
}

// Pool para Community Mapper
let poolCM
try {
  if (process.env.DATABASE_URL_CM) {
    poolCM = mysql.createPool({
      uri: process.env.DATABASE_URL_CM,
      ...poolConfig
    })
    console.log('‚úÖ Pool CM criado com sucesso')
  } else {
    console.warn('‚ö†Ô∏è DATABASE_URL_CM n√£o encontrada')
  }
} catch (error) {
  console.error('‚ùå Erro ao criar pool CM:', error.message)
}

// Pool para Mapa Comunidade  
let poolMC
try {
  if (process.env.DATABASE_URL_MC) {
    poolMC = mysql.createPool({
      uri: process.env.DATABASE_URL_MC,
      ...poolConfig
    })
    console.log('‚úÖ Pool MC criado com sucesso')
  } else {
    console.warn('‚ö†Ô∏è DATABASE_URL_MC n√£o encontrada')
  }
} catch (error) {
  console.error('‚ùå Erro ao criar pool MC:', error.message)
}

// Fun√ß√£o para testar conex√µes
async function testConnections() {
  console.log('üîç Testando conex√µes...')
  
  if (poolCM) {
    try {
      const conn = await poolCM.getConnection()
      const [rows] = await conn.execute('SELECT DATABASE() as db')
      console.log('‚úÖ CM conectado:', rows[0].db)
      conn.release()
    } catch (error) {
      console.error('‚ùå Erro CM:', error.message)
    }
  }

  if (poolMC) {
    try {
      const conn = await poolMC.getConnection()
      const [rows] = await conn.execute('SELECT DATABASE() as db')
      console.log('‚úÖ MC conectado:', rows[0].db)
      conn.release()
    } catch (error) {
      console.error('‚ùå Erro MC:', error.message)
    }
  }
}

// Fun√ß√£o para executar queries CM
async function executeQueryCM(query, params = []) {
  if (!poolCM) {
    throw new Error('Pool CM n√£o inicializado')
  }
  try {
    const [results] = await poolCM.execute(query, params)
    return results
  } catch (error) {
    console.error('‚ùå Query CM falhou:', error.message)
    throw error
  }
}

// Fun√ß√£o para executar queries MC
async function executeQueryMC(query, params = []) {
  if (!poolMC) {
    throw new Error('Pool MC n√£o inicializado')
  }
  try {
    const [results] = await poolMC.execute(query, params)
    return results
  } catch (error) {
    console.error('‚ùå Query MC falhou:', error.message)
    throw error
  }
}

// Export CommonJS
module.exports = {
  dbCM: poolCM,
  dbMC: poolMC,
  testConnections,
  executeQueryCM,
  executeQueryMC
}
